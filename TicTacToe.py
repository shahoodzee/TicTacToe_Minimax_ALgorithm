# -*- coding: utf-8 -*-
"""19L-2272_Lab_10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnYBRApPBfOnoa6g3u70W3YdPopck3H5
"""

#@title Create a dictionary board
def initialize(board):
  player = 'O'
  pc = 'X'
  return

def print_board(board):
    print(board[1] + ' | '+board[2]+ ' | '+board[3])
    print('_ * _ * _')
    print(board[4] + ' | '+board[5]+ ' | '+board[6])
    print('_ * _ * _')
    print(board[7] + ' | '+board[8]+ ' | '+board[9] + "\n")

def space_available(arr,i,j):
  if arr[i][j] == 1:
    print('Space occupied use another Spot!')

#@title To check Wether A Slot is avilable or not
def checkspace(pos):
  if(board[pos] == ' '):
    return True
  else:
    return False

def check_X_win():
    if (board[1] == board[2] and board[1] == board[3] and board[1] == 'X'):
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] == 'X'):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] == 'X'):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] == 'X'):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] == 'X'):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] == 'X'):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] == 'X'):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] == 'X'):
        return True
    else:
        return False

def check_O_win():
    if (board[1] == board[2] and board[1] == board[3] and board[1] == 'O'):
        return True
    elif (board[4] == board[5] and board[4] == board[6] and board[4] == 'O'):
        return True
    elif (board[7] == board[8] and board[7] == board[9] and board[7] == 'O'):
        return True
    elif (board[1] == board[4] and board[1] == board[7] and board[1] == 'O'):
        return True
    elif (board[2] == board[5] and board[2] == board[8] and board[2] == 'O'):
        return True
    elif (board[3] == board[6] and board[3] == board[9] and board[3] == 'O'):
        return True
    elif (board[1] == board[5] and board[1] == board[9] and board[1] == 'O'):
        return True
    elif (board[7] == board[5] and board[7] == board[3] and board[7] == 'O'):
        return True
    else:
        return False

#if u find any empty space then it means the games still going on  else
def checkDraw():
  for key in board.keys():
    if board[key] ==' ':
      return False

  return False

def place_at_pos(var,pos):
  while(True):
    if(checkspace(pos)==False):
      print('space not available')
      print_board(board)
      print("\n")
      pos = int(input('Enter new position: '))

    if(checkspace(pos)==True):
      board[pos] = var

      if(checkDraw()==True):
        print("Game's a draw!")
        break

      if(check_X_win()==True):
        print("Computer wins")
        break

      break
      # else:
      #   print("Player won!")

def player_move():
    position = int(input("Enter the position for 'O':  "))
    place_at_pos("O", position)
    return

def pc_move():
  bestScore = -999
  bestmove = 0
  for key in board.keys():
    if (board[key] == ' '):
      board[key] = 'X'  #maximizing event
      score = minimax(board, 0, False)
      board[key] = ' '
      if (score > bestScore):
        bestScore = score
        bestMove = key

  print("best move ",bestMove)
  place_at_pos('X', bestMove)
  return

def minimax(board, depth, isMaximizing):
    if (check_X_win()==True):
      return 1
    if (check_O_win()==True):
      return -1
    if (checkDraw()==True):
      return 0

    if (isMaximizing == True):
        bestScore = -999
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = 'X'
                score = minimax(board, 0, False)
                board[key] = ' '
                if (score > bestScore):
                   bestScore = score
        return bestScore
    else:
        #ismaximizing == False
        bestScore = 999
        for key in board.keys():
            if (board[key] == ' '):
                board[key] = 'O'
                score = minimax(board, 0, True)
                board[key] = ' '
                if (score < bestScore):
                    bestScore = score
        return bestScore

board = {1: ' ',2: ' ',3: ' ',
         4: ' ',5: ' ',6: ' ',
         7: ' ',8: ' ',9: ' '}

board_pos = {1: '1',2: '2',3: '3',
             4: '4',5: '5',6: '6',
             7: '7',8: '8',9: '9'}

print_board(board_pos)
pc_move()
print_board(board)
player_move()
print_board(board)

print_board(board)
pc_move()
print_board(board)
player_move()
print_board(board)

print_board(board)
pc_move()
print_board(board)
player_move()
print_board(board)